version: '3.8'

services:
  # GameConsole Core Services
  gameengine:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: gameconsole-engine
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Development}
      - GAMEENGINE_LOG_LEVEL=${GAMEENGINE_LOG_LEVEL:-Information}
    ports:
      - "${GAMEENGINE_PORT:-8080}:8080"
    volumes:
      - gamedata:/app/data
    networks:
      - gameengine-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "echo", "Health check placeholder"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - redis
      - postgres

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: gameconsole-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    networks:
      - gameengine-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for persistent data storage
  postgres:
    image: postgres:15-alpine
    container_name: gameconsole-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-gameengine}
      - POSTGRES_USER=${POSTGRES_USER:-gameuser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-gamepass123}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./deploy/sql/init:/docker-entrypoint-initdb.d
    networks:
      - gameengine-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-gameuser} -d ${POSTGRES_DB:-gameengine}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring and metrics (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: gameconsole-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./deploy/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - gameengine-network
    restart: unless-stopped
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: gameconsole-grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./deploy/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - gameengine-network
    restart: unless-stopped
    profiles:
      - monitoring
    depends_on:
      - prometheus

networks:
  gameengine-network:
    driver: bridge
    name: gameconsole-network

volumes:
  gamedata:
    name: gameconsole-data
  redis-data:
    name: gameconsole-redis-data
  postgres-data:
    name: gameconsole-postgres-data
  prometheus-data:
    name: gameconsole-prometheus-data
  grafana-data:
    name: gameconsole-grafana-data