name: rfc-assign-cron

on:
  schedule:
    - cron: '*/10 * * * *'
  workflow_dispatch:

permissions:
  contents: read
  issues: write

jobs:
  assign_earliest_unassigned:
    environment: copilot
    runs-on: ubuntu-latest
    steps:
      - name: Select token (prefer AUTO_APPROVE_TOKEN)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AUTO_APPROVE_TOKEN: ${{ secrets.AUTO_APPROVE_TOKEN }}
        run: |
          if [ -n "${AUTO_APPROVE_TOKEN:-}" ]; then
            echo "GH_TOKEN=$AUTO_APPROVE_TOKEN" >> $GITHUB_ENV
            echo "Using AUTO_APPROVE_TOKEN"
          else
            echo "GH_TOKEN=$GITHUB_TOKEN" >> $GITHUB_ENV
            echo "Using GITHUB_TOKEN"
          fi
          # Note: AUTO_APPROVE_TOKEN provides broader permissions for assignment
          # If not available, we'll use GITHUB_TOKEN (may have limited permissions)
      - name: Resolve Copilot bot id
        id: bot
        env:
          GH_TOKEN: ${{ env.GH_TOKEN }}
        run: |
          set -euo pipefail
          OWNER=${{ github.repository_owner }}
          NAME=${{ github.event.repository.name || github.event.workflow_run.repository.name || '' }}
          if [ -z "$NAME" ]; then NAME=$(basename "${{ github.repository }}"); fi

          # Skip suggestedActors query (may not work with AUTO_APPROVE_TOKEN)
          # Go straight to fallback methods
          BOT=""

          # Try fallback: direct bot lookup
          echo "Trying fallback: direct bot lookup"
          BOT=$(gh api graphql -f query='query{ user(login:"copilot-swe-agent"){ id } }' --jq '.data.user.id' 2>/dev/null || true)

          # If still no bot found, use known bot ID as last resort
          if [ -z "$BOT" ]; then
            echo "Using known bot ID as fallback"
            BOT="BOT_kgDOC9w8XQ"
          fi

          if [ -z "$BOT" ]; then
            echo "No Copilot bot id found with any method"
            exit 0
          fi

          echo "id=$BOT" >> $GITHUB_OUTPUT
          echo "Resolved Copilot bot id: $BOT"

      - name: Select earliest unassigned micro per RFC
        id: select
        if: steps.bot.outputs.id != ''
        env:
          GH_TOKEN: ${{ env.GH_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail

          # First, get all open PRs and their RFC numbers
          OPEN_PRS=$(gh pr list --repo "$REPO" --state open --json number,title \
            --jq '[ .[]
                    | select(.title | test("RFC-[0-9]{3}-[0-9]{2}"; "i"))
                    | (.title|capture("RFC-(?<r>[0-9]{3})-(?<m>[0-9]{2})").r|tonumber) ] | unique')

          # Gather open issues that look like micro RFCs and pick the earliest unassigned per RFC
          IDS=$(gh issue list --repo "$REPO" --state open --json number,title,assignees \
            --jq --argjson openPrRfcs "$OPEN_PRS" '[ .[]
                    | select(.title | test("RFC-[0-9]{3}-[0-9]{2}"; "i"))
                    | {num:.number,
                       a:(.assignees|length),
                       r:(.title|capture("RFC-(?<r>[0-9]{3})-(?<m>[0-9]{2})").r|tonumber),
                       m:(.title|capture("RFC-(?<r>[0-9]{3})-(?<m>[0-9]{2})").m|tonumber)} ]
                  | sort_by(.r, .m, .num)
                  | group_by(.r)
                  | map( select( ($openPrRfcs | index(.[0].r)) == null ) )  # Filter out RFCs with open PRs
                  | map( (map(select(.a==0)) | first) )
                  | map(select(. != null))
                  | map(.num)
                  | @sh')
          # Output space-separated list
          # shellcheck disable=SC2086
          echo "ids=$IDS" >> $GITHUB_OUTPUT
          echo "Selected issues: $IDS"

      - name: Assign selected issues to Copilot
        if: steps.select.outputs.ids != ''
        env:
          GH_TOKEN: ${{ env.GH_TOKEN }}
          REPO: ${{ github.repository }}
          BOT: ${{ steps.bot.outputs.id }}
        run: |
          set -euo pipefail
          # Parse the sh-encoded array from previous step
          eval "ARR=(${ { steps.select.outputs.ids } })" 2>/dev/null || eval "ARR=(${steps.select.outputs.ids})"
          M='mutation($assignableId: ID!, $actorIds: [ID!]!){ replaceActorsForAssignable(input:{ assignableId: $assignableId, actorIds: $actorIds }){ clientMutationId } }'
          for ISSUE in "${ARR[@]}"; do
            IID=$(gh issue view "$ISSUE" --repo "$REPO" --json id --jq .id)
            if [ -n "$IID" ]; then
              gh api graphql -f query="$M" -F assignableId="$IID" -F actorIds="$BOT" >/dev/null || true
              echo "Assigned #$ISSUE"
            fi
          done
