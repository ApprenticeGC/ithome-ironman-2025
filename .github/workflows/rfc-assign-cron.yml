name: rfc-assign-cron

on:
  schedule:
    - cron: '*/10 * * * *'
  workflow_dispatch:
  issues:
    types: [opened]

permissions:
  contents: read
  issues: write

jobs:
  assign_earliest_unassigned:
    environment: copilot
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Select token (prefer AUTO_APPROVE_TOKEN)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AUTO_APPROVE_TOKEN: ${{ secrets.AUTO_APPROVE_TOKEN }}
        run: |
          if [ -n "${AUTO_APPROVE_TOKEN:-}" ]; then
            echo "GH_TOKEN=$AUTO_APPROVE_TOKEN" >> $GITHUB_ENV
            echo "Using AUTO_APPROVE_TOKEN"
          else
            echo "GH_TOKEN=$GITHUB_TOKEN" >> $GITHUB_ENV
            echo "Using GITHUB_TOKEN"
          fi
          # Note: AUTO_APPROVE_TOKEN provides broader permissions for assignment
          # If not available, we'll use GITHUB_TOKEN (may have limited permissions)
      - name: Resolve Copilot bot id
        id: bot
        env:
          GH_TOKEN: ${{ env.GH_TOKEN }}
        run: |
          set -euo pipefail
          OWNER=${{ github.repository_owner }}
          NAME=$(basename "${{ github.repository }}")
          # Handle different event types: issues, schedule, workflow_dispatch

          # Skip suggestedActors query (may not work with AUTO_APPROVE_TOKEN)
          # Go straight to fallback methods
          BOT=""

          # Try fallback: direct bot lookup
          echo "Trying fallback: direct bot lookup"
          BOT=$(gh api graphql -f query='query{ user(login:"copilot-swe-agent"){ id } }' --jq '.data.user.id' 2>/dev/null || true)

          # If still no bot found, use known bot ID as last resort
          if [ -z "$BOT" ]; then
            echo "Using known bot ID as fallback"
            BOT="BOT_kgDOC9w8XQ"
          fi

          if [ -z "$BOT" ]; then
            echo "No Copilot bot id found with any method"
            exit 0
          fi

          echo "id=$BOT" >> $GITHUB_OUTPUT
          echo "Resolved Copilot bot id: $BOT"

      - name: Find and assign unassigned RFC issues
        if: steps.bot.outputs.id != ''
        env:
          GH_TOKEN: ${{ env.GH_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail

          # Get all unique RFC numbers from open unassigned issues
          RFC_NUMBERS=$(gh issue list --repo "$REPO" --state open --json number,title,assignees \
            --jq '[ .[] | select(.title | test("RFC-[0-9]{3}-[0-9]{2}"; "i")) | select((.assignees | length) == 0) | .title | capture("RFC-(?<r>[0-9]{3})-(?<m>[0-9]{2})").r ] | unique | .[]' | tr -d '"')

          echo "Found unassigned RFCs: $RFC_NUMBERS"

          # For each RFC number, assign the first unassigned issue using Python script
          for RFC_NUM in $RFC_NUMBERS; do
            echo "Processing RFC-$RFC_NUM"
            python3 scripts/python/production/assign_first_open_for_rfc.py "$RFC_NUM" || echo "Failed to assign RFC-$RFC_NUM"
          done
