name: deployment

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - 'release/**'
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
    paths:
      - 'dotnet/**'
      - 'build/**'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - '.github/workflows/deployment.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: gameconsole

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Generate version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION="0.1.0-dev.$(date +%Y%m%d%H%M%S)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

      - name: Build with Nuke
        run: |
          chmod +x ./build/nuke/build.sh
          ./build/nuke/build.sh --root . --target Test --configuration Release

      - name: Package with Nuke
        run: |
          ./build/nuke/build.sh --root . --target Package --configuration Release

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ steps.version.outputs.version }}
          path: artifacts/**/*.nupkg
          retention-days: 30

  build-container:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push container image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy-staging:
    needs: [build-and-test, build-container]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying version ${{ needs.build-and-test.outputs.version }} to staging"
          echo "Container image: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:main"
          echo "Deployment automation complete"

  deploy-production:
    needs: [build-and-test, build-container]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying version ${{ needs.build-and-test.outputs.version }} to production"
          echo "Container image: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-test.outputs.version }}"
          echo "Production deployment automation complete"