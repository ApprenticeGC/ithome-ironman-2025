name: cd

on:
  workflow_run:
    workflows: ["ci"]
    types: [completed]
    branches: [main, develop]

  workflow_dispatch:
    inputs:
      environment:
        description: 'Target deployment environment'
        required: true
        type: choice
        options:
          - staging
          - production
        default: 'staging'
      force_deploy:
        description: 'Force deployment even if CI failed'
        required: false
        type: boolean
        default: false

jobs:
  check-ci-status:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run'
    outputs:
      ci_success: ${{ steps.check.outputs.ci_success }}
      should_deploy: ${{ steps.check.outputs.should_deploy }}
    steps:
      - name: Check CI workflow result
        id: check
        run: |
          if [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
            echo "ci_success=true" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "✅ CI workflow completed successfully"
          else
            echo "ci_success=false" >> $GITHUB_OUTPUT
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "❌ CI workflow failed - deployment cancelled"
          fi

  deploy-staging:
    needs: check-ci-status
    if: |
      always() && (
        (github.event_name == 'workflow_run' && needs.check-ci-status.outputs.should_deploy == 'true' && github.event.workflow_run.head_branch == 'develop') ||
        (github.event_name == 'workflow_dispatch' && (inputs.environment == 'staging' || inputs.force_deploy))
      )
    uses: ./.github/workflows/deploy.yml
    with:
      environment: staging
      image_tag: ${{ github.event.workflow_run.head_sha || github.sha }}
      skip_tests: ${{ github.event_name == 'workflow_run' }}
    secrets:
      DOCKER_REGISTRY_URL: ${{ secrets.DOCKER_REGISTRY_URL }}
      DOCKER_REGISTRY_USERNAME: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
      DOCKER_REGISTRY_PASSWORD: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
      DEPLOY_SSH_KEY: ${{ secrets.STAGING_DEPLOY_SSH_KEY }}
      DEPLOY_HOST: ${{ secrets.STAGING_DEPLOY_HOST }}

  deploy-production:
    needs: check-ci-status
    if: |
      always() && (
        (github.event_name == 'workflow_run' && needs.check-ci-status.outputs.should_deploy == 'true' && github.event.workflow_run.head_branch == 'main') ||
        (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
      )
    uses: ./.github/workflows/deploy.yml
    with:
      environment: production
      image_tag: ${{ github.event.workflow_run.head_sha || github.sha }}
      skip_tests: ${{ github.event_name == 'workflow_run' }}
    secrets:
      DOCKER_REGISTRY_URL: ${{ secrets.DOCKER_REGISTRY_URL }}
      DOCKER_REGISTRY_USERNAME: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
      DOCKER_REGISTRY_PASSWORD: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
      DEPLOY_SSH_KEY: ${{ secrets.PRODUCTION_DEPLOY_SSH_KEY }}
      DEPLOY_HOST: ${{ secrets.PRODUCTION_DEPLOY_HOST }}

  notify-deployment:
    runs-on: ubuntu-latest
    needs: [check-ci-status, deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result != 'skipped' || needs.deploy-production.result != 'skipped')
    steps:
      - name: Create deployment notification
        run: |
          STAGING_STATUS="${{ needs.deploy-staging.result }}"
          PRODUCTION_STATUS="${{ needs.deploy-production.result }}"
          
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## 🚀 Continuous Deployment Summary
          
          ### Trigger Information
          - **Event**: ${{ github.event_name }}
          - **Branch**: ${{ github.event.workflow_run.head_branch || github.ref_name }}
          - **Commit**: ${{ github.event.workflow_run.head_sha || github.sha }}
          - **Actor**: ${{ github.actor }}
          
          ### Deployment Results
          EOF
          
          if [[ "$STAGING_STATUS" != "skipped" ]]; then
            echo "- **Staging**: $STAGING_STATUS" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "$PRODUCTION_STATUS" != "skipped" ]]; then
            echo "- **Production**: $PRODUCTION_STATUS" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Deployment pipeline completed at $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY