name: Deploy GameConsole

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: gameconsole

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore ./dotnet

      - name: Build solution
        run: dotnet build ./dotnet --configuration Release --no-restore -warnaserror

      - name: Run tests
        run: dotnet test ./dotnet --configuration Release --no-build --verbosity normal --logger trx || true

  build-container:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-url: ${{ steps.build.outputs.image-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push container image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    needs: build-container
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout deployment configs
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          echo "Image: ${{ needs.build-container.outputs.image-url }}"
          echo "Digest: ${{ needs.build-container.outputs.image-digest }}"
          
          # Create deployment manifest
          mkdir -p deployment/manifests
          cat > deployment/manifests/staging.yml << EOF
          version: '3.8'
          services:
            gameconsole:
              image: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}@${{ needs.build-container.outputs.image-digest }}
              ports:
                - "8080:8080"
              environment:
                - DOTNET_ENVIRONMENT=Staging
              restart: unless-stopped
          EOF
          
          echo "Deployment manifest created for staging"

  deploy-production:
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    needs: build-container
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout deployment configs
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          echo "Image: ${{ needs.build-container.outputs.image-url }}"
          echo "Digest: ${{ needs.build-container.outputs.image-digest }}"
          
          # Create deployment manifest
          mkdir -p deployment/manifests
          cat > deployment/manifests/production.yml << EOF
          version: '3.8'
          services:
            gameconsole:
              image: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}@${{ needs.build-container.outputs.image-digest }}
              ports:
                - "80:8080"
              environment:
                - DOTNET_ENVIRONMENT=Production
              restart: unless-stopped
              deploy:
                replicas: 3
                resources:
                  limits:
                    memory: 512M
                  reservations:
                    memory: 256M
          EOF
          
          echo "Deployment manifest created for production"