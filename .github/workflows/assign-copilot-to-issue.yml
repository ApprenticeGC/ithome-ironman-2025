name: Assign Copilot to Issue

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: Issue number (e.g., 5)
        required: true

permissions:
  contents: read
  issues: write

jobs:
  assign:
    environment: copilot
    runs-on: ubuntu-latest
    steps:
      - name: Select token (prefer AUTO_APPROVE_TOKEN)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AUTO_APPROVE_TOKEN: ${{ secrets.AUTO_APPROVE_TOKEN }}
        run: |
          if [ -n "${AUTO_APPROVE_TOKEN:-}" ]; then
            echo "GH_TOKEN=$AUTO_APPROVE_TOKEN" >> $GITHUB_ENV
            echo "Using AUTO_APPROVE_TOKEN"
          else
            echo "GH_TOKEN=$GITHUB_TOKEN" >> $GITHUB_ENV
            echo "Using GITHUB_TOKEN"
          fi
          # Enforce PAT usage as required
          if [ -z "${AUTO_APPROVE_TOKEN:-}" ]; then
            echo "ERROR: AUTO_APPROVE_TOKEN (PAT) is required for assignment. Configure it in repo or environment 'copilot'." >&2
            exit 1
          fi

      - name: Resolve issue and Copilot actor
        env:
          REPO: ${{ github.repository }}
          ISSUE: ${{ github.event.inputs.issue_number }}
        run: |
          set -euo pipefail
          echo "Resolving issue node id and Copilot bot id..."
          IID=$(gh issue view "$ISSUE" --repo "$REPO" --json id --jq .id)
          OWNER=${REPO%/*}; NAME=${REPO#*/}
          Q='query($owner:String!,$name:String!){ repository(owner:$owner,name:$name){ suggestedActors(capabilities:[CAN_BE_ASSIGNED],first:100){ nodes{ login __typename ... on Bot { id } } } } }'
          NODE=$(gh api graphql -f query="$Q" -F owner="$OWNER" -F name="$NAME" --jq '.data.repository.suggestedActors.nodes[] | select(."__typename"=="Bot" and (.login|ascii_downcase|test("copilot")))' | head -n1 || true)
          ACTOR_ID=$(jq -r 'select(.) | .id // empty' <<<"$NODE" || true)
          ACTOR_TYPE=$(jq -r 'select(.) | .__typename // empty' <<<"$NODE" || true)
          CUR=$(gh issue view "$ISSUE" --repo "$REPO" --json assignees --jq '.assignees[].login' || true)
          if echo "$CUR" | grep -qi '^copilot$'; then echo "Already assigned"; exit 0; fi
          if [ -z "${ACTOR_ID:-}" ]; then
            echo "No Copilot bot in suggestedActors; attempting fallback via user(login:Copilot)"
            COPILOT_ID=$(gh api graphql -f query='query($login:String!){ user(login:$login){ id __typename } }' -F login='Copilot' --jq '.data.user.id' || true)
            # Guard against error JSON leaking into COPILOT_ID
            if echo "$COPILOT_ID" | grep -q '{'; then COPILOT_ID=""; fi
            if [ -z "$COPILOT_ID" ]; then
              echo "Fallback Copilot user(login:Copilot) not found; trying user(login:copilot-swe-agent)"
              COPILOT_ID=$(gh api graphql -f query='query($login:String!){ user(login:$login){ id __typename } }' -F login='copilot-swe-agent' --jq '.data.user.id' || true)
              if echo "$COPILOT_ID" | grep -q '{'; then COPILOT_ID=""; fi
            fi
            if [ -n "$COPILOT_ID" ]; then ACTOR_ID="$COPILOT_ID"; ACTOR_TYPE="User"; else echo "No Copilot id resolved"; exit 1; fi
          fi
          echo "Issue id: $IID | Copilot actor id: $ACTOR_ID type: $ACTOR_TYPE"
          if [ "$ACTOR_TYPE" = "Bot" ]; then
            echo "Assigning via replaceActorsForAssignable (Bot)"
            M='mutation($assignableId: ID!, $actorIds: [ID!]!){ replaceActorsForAssignable(input:{ assignableId:$assignableId, actorIds:$actorIds }){ clientMutationId } }'
            gh api graphql -f query="$M" -F assignableId="$IID" -F actorIds="$ACTOR_ID" >/dev/null
          else
            echo "Assigning via addAssigneesToAssignable (User)"
            M='mutation($assignableId: ID!, $assigneeIds: [ID!]!){ addAssigneesToAssignable(input:{ assignableId:$assignableId, assigneeIds:$assigneeIds }){ clientMutationId } }'
            gh api graphql -f query="$M" -F assignableId="$IID" -F assigneeIds="$ACTOR_ID" >/dev/null
          fi
          gh issue view "$ISSUE" --repo "$REPO" --json assignees,url
