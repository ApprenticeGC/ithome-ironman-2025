name: Assign Copilot to Issue

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: Issue number (e.g., 5)
        required: true

permissions:
  contents: read
  issues: write

jobs:
  assign:
    if: ${{ vars.COPILOT_ASSIGN_DISABLED != '1' }}
    environment: copilot
    runs-on: ubuntu-latest
    steps:
      - name: Select token (prefer AUTO_APPROVE_TOKEN)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AUTO_APPROVE_TOKEN: ${{ secrets.AUTO_APPROVE_TOKEN }}
        run: |
          if [ -n "${AUTO_APPROVE_TOKEN:-}" ]; then
            echo "GH_TOKEN=$AUTO_APPROVE_TOKEN" >> $GITHUB_ENV
            echo "Using AUTO_APPROVE_TOKEN"
          else
            echo "GH_TOKEN=$GITHUB_TOKEN" >> $GITHUB_ENV
            echo "Using GITHUB_TOKEN"
          fi
          # Enforce PAT usage as required
          if [ -z "${AUTO_APPROVE_TOKEN:-}" ]; then
            echo "ERROR: AUTO_APPROVE_TOKEN (PAT) is required for assignment. Configure it in repo or environment 'copilot'." >&2
            exit 1
          fi

      - name: Acquire RFC series lock
        env:
          GH_TOKEN: ${{ secrets.AUTO_APPROVE_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          OWNER=${{ github.repository_owner }}
          REPO_NAME=${{ github.event.repository.name }}
          python3 scripts/python/production/rfc_assignment_mutex.py \
            --owner "$OWNER" \
            --repo "$REPO_NAME" \
            --issue-number ${{ github.event.inputs.issue_number }}
      - name: Assign issue to Copilot
        env:
          GH_TOKEN: ${{ secrets.AUTO_APPROVE_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          OWNER=${{ github.repository_owner }}
          REPO_NAME=${{ github.event.repository.name }}
          python3 scripts/python/production/assign_issue_to_copilot.py \
            --owner "$OWNER" \
            --repo "$REPO_NAME" \
            --issue-number ${{ github.event.inputs.issue_number }} \
            --assign-mode bot

      - name: Emit issue assignment event
        if: success()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
          ISSUE_NUMBER: ${{ github.event.inputs.issue_number }}
        run: |
          set -euo pipefail
          export PYTHONPATH=scripts/python/production:$PYTHONPATH
          python <<'PY'
          import json
          import os
          import re
          import subprocess

          from event_bus import EventBusError, emit_event

          owner = os.environ['OWNER']
          repo = os.environ['REPO_NAME']
          issue_number = int(os.environ['ISSUE_NUMBER'])
          result = subprocess.run(['gh', 'issue', 'view', str(issue_number), '--json', 'title'], capture_output=True, text=True, check=True)
          issue_title = json.loads(result.stdout)['title']
          match = re.search(r'(?:Game-)?RFC-(\d+)-(\d+)', issue_title)
          if match:
              series = f"RFC-{int(match.group(1)):03d}"
              micro = f"{int(match.group(2)):02d}"
              payload = {'issue': issue_number, 'series': series, 'micro': micro}
              try:
                  emit_event('rfc.issue.assigned', payload, repo=f"{owner}/{repo}", source='workflow:assign-copilot')
              except EventBusError as exc:
                  print(f'Warning: failed to emit rfc.issue.assigned event: {exc}', file=os.sys.stderr)
          else:
              print('Issue title did not contain RFC identifier; skipping event emission', file=os.sys.stderr)
          PY
