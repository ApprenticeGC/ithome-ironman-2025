name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
      version_tag:
        description: 'Version tag to deploy (e.g., v1.0.0)'
        required: false
        type: string
      skip_health_check:
        description: 'Skip health check after deployment'
        required: false
        default: false
        type: boolean

  release:
    types: [published]

env:
  DOTNET_VERSION: '8.0.x'
  BUILD_CONFIGURATION: 'Release'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.inputs.version_tag || github.sha }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore ./dotnet

      - name: Build GameConsole
        run: dotnet build ./dotnet -c ${{ env.BUILD_CONFIGURATION }} --no-restore -warnaserror

      - name: Test before deployment
        run: dotnet test ./dotnet --no-build -c ${{ env.BUILD_CONFIGURATION }} --verbosity minimal

      - name: Publish GameConsole
        run: dotnet publish ./dotnet/GameConsole.Engine.Core/GameConsole.Engine.Core.csproj -c ${{ env.BUILD_CONFIGURATION }} --no-build -o ./publish

      - name: Create deployment package
        run: |
          cd ./publish
          tar -czf ../gameconsole-${{ github.event.inputs.environment || 'production' }}-${{ github.sha }}.tar.gz .
          cd ..

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: gameconsole-${{ github.event.inputs.environment || 'production' }}-${{ github.sha }}
          path: gameconsole-${{ github.event.inputs.environment || 'production' }}-${{ github.sha }}.tar.gz
          retention-days: 30

      - name: Deploy to environment
        env:
          DEPLOY_ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
          DEPLOYMENT_PACKAGE: gameconsole-${{ github.event.inputs.environment || 'production' }}-${{ github.sha }}.tar.gz
        run: |
          echo "üöÄ Deploying GameConsole to $DEPLOY_ENVIRONMENT environment"
          echo "üì¶ Package: $DEPLOYMENT_PACKAGE"
          echo "üè∑Ô∏è  Version: ${{ github.event.inputs.version_tag || github.sha }}"
          
          # Simulate deployment process
          echo "üìã Deployment started at $(date)"
          echo "‚úÖ Package validated"
          echo "‚¨ÜÔ∏è  Uploading to $DEPLOY_ENVIRONMENT"
          sleep 2
          echo "üîÑ Restarting services"
          sleep 1
          echo "‚úÖ Deployment completed successfully"

      - name: Health check
        if: ${{ !github.event.inputs.skip_health_check }}
        env:
          DEPLOY_ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
        run: |
          echo "üè• Running health checks for $DEPLOY_ENVIRONMENT environment"
          sleep 2
          echo "‚úÖ Application is healthy"
          echo "‚úÖ All services responding"
          echo "‚úÖ Health check passed"

      - name: Deployment notification
        run: |
          echo "üì¢ Deployment Notification"
          echo "Environment: ${{ github.event.inputs.environment || 'production' }}"
          echo "Version: ${{ github.event.inputs.version_tag || github.sha }}"
          echo "Status: ‚úÖ SUCCESS"
          echo "Time: $(date)"

  rollback:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    if: failure()
    needs: deploy
    steps:
      - name: Rollback deployment
        env:
          DEPLOY_ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
        run: |
          echo "üö® Deployment failed, initiating rollback"
          echo "üîÑ Rolling back to previous version in $DEPLOY_ENVIRONMENT"
          sleep 1
          echo "‚úÖ Rollback completed"
          echo "üì¢ Notifying team of rollback"