name: auto-ready-pr

on:
  # Gate on CI success for the PR to reduce false "ready" flips
  workflow_run:
    workflows:
      - ci
    types:
      - completed
  issue_comment:
    types: [created]

permissions:
  pull-requests: write
  contents: read

jobs:
  mark_ready_on_ci_success:
    if: >-
      ${{
        github.event_name == 'workflow_run' &&
        github.event.workflow_run.conclusion == 'success' &&
        (github.event.workflow_run.event == 'pull_request' || github.event.workflow_run.event == 'push' || github.event.workflow_run.event == 'workflow_dispatch')
      }}
    environment: copilot
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Enhanced CI log validation
        if: success()
        env:
          GH_TOKEN: ${{ secrets.AUTO_APPROVE_TOKEN || secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          GITHUB_EVENT: ${{ toJson(github.event) }}
        run: python3 scripts/python/production/validate_ci_logs.py
      - name: Flip draft PR to ready when CI truly succeeded
        if: success()
        env:
          GH_TOKEN: ${{ secrets.AUTO_APPROVE_TOKEN || secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          GITHUB_EVENT: ${{ toJson(github.event) }}
        run: python3 scripts/python/production/mark_pr_ready_on_ci.py

  mark_ready_on_command:
    if: >-
      ${{
        github.event_name == 'issue_comment' &&
        startsWith(github.event.comment.body, '/ready') &&
        (github.event.comment.author_association == 'MEMBER' || github.event.comment.author_association == 'OWNER' || github.event.comment.author_association == 'COLLABORATOR') &&
        github.event.issue.pull_request
      }}
    environment: copilot
    runs-on: ubuntu-latest
    steps:
      - name: Flip draft PR to ready via /ready command
        env:
          GH_TOKEN: ${{ secrets.AUTO_APPROVE_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          PR_NUMBER=${{ github.event.issue.number }}
          PR_JSON=$(gh pr view "$PR_NUMBER" --repo ${{ github.repository }} --json draft)
          DRAFT=$(jq -r .draft <<< "$PR_JSON")
          if [ "$DRAFT" = "true" ]; then
            # Use GraphQL to mark PR as ready for review
            gh api graphql -f query='mutation($id: ID!) { markPullRequestReadyForReview(input: {pullRequestId: $id}) { clientMutationId } }' -F id="$(gh pr view $PR_NUMBER --repo ${{ github.repository }} --json id -q .id)"
          else
            echo "PR already ready"
          fi
