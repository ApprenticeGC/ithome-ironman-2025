name: rfc-sync

on:
  push:
    paths:
      - 'docs/game-rfcs/**.md'

permissions:
  contents: read
  issues: write

jobs:
  generate_and_assign:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Detect changed RFC files
        id: changed
        run: |
          set -euo pipefail
          # Use push payload commit lists to avoid bad-object diffs
          EVENT_JSON='${{ toJson(github.event) }}'
          ADDED=$(printf "%s" "$EVENT_JSON" | jq -r '.commits[]?.added[]? // empty')
          MODIFIED=$(printf "%s" "$EVENT_JSON" | jq -r '.commits[]?.modified[]? // empty')
          # Combine and filter for docs/game-rfcs/*.md
          FILES=$(printf "%s\n%s\n" "$ADDED" "$MODIFIED" | grep -E '^docs/game-rfcs/.*\.md$' | sort -u || true)
          # Fallback: if none detected (e.g., squash merge payload), include all RFCs to be safe
          if [ -z "$FILES" ]; then
            FILES=$(git ls-files 'docs/game-rfcs/**.md' | tr '\n' '\n')
          fi
          FILES_CSV=$(printf '%s\n' $FILES | sed '/^$/d' | paste -sd ',')
          echo "files=$FILES_CSV" >> $GITHUB_OUTPUT

      - name: Generate micro issues for each changed RFC
        if: steps.changed.outputs.files != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          IFS=',' read -r -a FILES <<< "${{ steps.changed.outputs.files }}"
          for f in "${FILES[@]}"; do
            echo "Generating for $f"
            python .github/scripts/generate_micro_issues_from_rfc.py \
              --rfc-path "$f" \
              --owner "${{ github.repository_owner }}" \
              --repo "${{ github.event.repository.name }}" \
              --assign-mode bot || true
          done

      - name: Ensure first open micro is assigned to Copilot
        if: steps.changed.outputs.files != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail
          IFS=',' read -r -a FILES <<< "${{ steps.changed.outputs.files }}"
          for f in "${FILES[@]}"; do
            base=$(basename "$f")
            if [[ "$base" =~ RFC-([0-9]{3}) ]]; then
              RFC=${BASH_REMATCH[1]}
            else
              continue
            fi
            echo "Assigning first open micro for RFC-$RFC"
            # Find earliest open unassigned micro; tie-break by issue number
            SEL=$(gh issue list --repo "$REPO" --state open --json number,title,assignees --jq \
              "[ .[] | select(.title | test(\"RFC-$RFC-[0-9]{2}\"; \"i\")) | {num:.number,a:(.assignees|length),m:(.title|capture(\"RFC-(?<r>[0-9]{3})-(?<m>[0-9]{2})\").m|tonumber)} ] | map(select(.a==0)) | sort_by(.m, .num) | .[0].num" || true)
            if [ -z "$SEL" ] || [ "$SEL" = "null" ]; then
              echo "No unassigned micro found for RFC-$RFC"; continue; fi
            # Resolve Copilot bot id
            OWNER=${REPO%/*}; NAME=${REPO#*/}
            Q='query($owner:String!,$name:String!){ repository(owner:$owner,name:$name){ suggestedActors(capabilities:[CAN_BE_ASSIGNED],first:100){ nodes{ login __typename ... on Bot { id } } } } }'
            BOT=$(gh api graphql -f query="$Q" -F owner="$OWNER" -F name="$NAME" --jq '.data.repository.suggestedActors.nodes[] | select(."__typename"=="Bot" and (.login|ascii_downcase|test("copilot"))) | .id' | head -n1)
            if [ -z "$BOT" ]; then echo "No Copilot bot id"; continue; fi
            IID=$(gh issue view "$SEL" --repo "$REPO" --json id --jq .id)
            M='mutation($assignableId: ID!, $actorIds: [ID!]!){ replaceActorsForAssignable(input:{ assignableId:$assignableId, actorIds:$actorIds }){ clientMutationId } }'
            gh api graphql -f query="$M" -F assignableId="$IID" -F actorIds="$BOT" >/dev/null || true
            echo "Assigned issue #$SEL to Copilot for RFC-$RFC"
          done
