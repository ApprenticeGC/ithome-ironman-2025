name: rfc-sync

on:
  push:
    paths:
      - 'docs/game-rfcs/**.md'

permissions:
  contents: read
  issues: write

jobs:
  generate_and_assign:
    environment: copilot
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Detect changed RFC files
        id: changed
        run: |
          set -euo pipefail
          # Use push payload commit lists to avoid bad-object diffs
          EVENT_JSON='${{ toJson(github.event) }}'
          ADDED=$(printf "%s" "$EVENT_JSON" | jq -r '.commits[]?.added[]? // empty')
          MODIFIED=$(printf "%s" "$EVENT_JSON" | jq -r '.commits[]?.modified[]? // empty')
          # Combine and filter for docs/game-rfcs/*.md
          FILES=$(printf "%s\n%s\n" "$ADDED" "$MODIFIED" | grep -E '^docs/game-rfcs/.*\.md$' | sort -u || true)
          # Fallback: if none detected (e.g., squash merge payload), include all RFCs to be safe
          if [ -z "$FILES" ]; then
            FILES=$(git ls-files 'docs/game-rfcs/**.md' | tr '\n' '\n')
          fi
          FILES_CSV=$(printf '%s\n' $FILES | sed '/^$/d' | paste -sd ',')
          echo "files=$FILES_CSV" >> $GITHUB_OUTPUT

      - name: Generate micro issues for each changed RFC
        if: steps.changed.outputs.files != ''
        run: |
          IFS=',' read -r -a FILES <<< "${{ steps.changed.outputs.files }}"
          for f in "${FILES[@]}"; do
            echo "Generating for $f"
            python scripts/python/production/generate_micro_issues_from_rfc.py \
              --rfc-path "$f" \
              --owner "${{ github.repository_owner }}" \
              --repo "${{ github.event.repository.name }}" \
              --assign-mode bot || true
          done

      - name: Select token (prefer AUTO_APPROVE_TOKEN)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AUTO_APPROVE_TOKEN: ${{ secrets.AUTO_APPROVE_TOKEN }}
        run: |
          if [ -n "${AUTO_APPROVE_TOKEN:-}" ]; then
            echo "GH_TOKEN=$AUTO_APPROVE_TOKEN" >> $GITHUB_ENV
            echo "Using AUTO_APPROVE_TOKEN"
          else
            echo "ERROR: AUTO_APPROVE_TOKEN (PAT) is required for assignment in rfc-sync." >&2
            exit 1
          fi

      - name: Ensure first open micro is assigned to Copilot
        if: steps.changed.outputs.files != ''
        env:
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail
          IFS=',' read -r -a FILES <<< "${{ steps.changed.outputs.files }}"
          for f in "${FILES[@]}"; do
            base=$(basename "$f")
            if [[ "$base" =~ RFC-([0-9]{3}) ]]; then
              RFC=${BASH_REMATCH[1]}
              echo "Assigning earliest unassigned for RFC-$RFC via helper"
              REPO="${REPO}" python scripts/python/production/assign_first_open_for_rfc.py "$RFC" || true
            fi
          done
