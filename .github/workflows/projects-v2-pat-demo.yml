name: GitHub Projects v2 PAT Demo

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'list-projects'
        type: choice
        options:
        - list-projects
        - list-project-items
        - create-project-item
        - create-repo-issue-and-add-to-project
      project_number:
        description: 'Project number (for project-specific actions)'
        required: false
        type: string
      item_title:
        description: 'Item title (for create-project-item)'
        required: false
        type: string

permissions:
  contents: read

jobs:
  projects-pat-demo:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: List Projects v2 with PAT
      if: github.event.inputs.action == 'list-projects'
      run: |
        echo "Listing Projects v2 for user using PAT..."
        gh api graphql -f query='
        {
          viewer {
            login
            projectsV2(first: 10) {
              totalCount
              nodes {
                id
                number
                title
                url
                shortDescription
                public
                closed
                createdAt
                updatedAt
              }
            }
          }
        }' --jq '.'

        echo ""
        echo "Formatted list:"
        gh api graphql -f query='
        {
          viewer {
            projectsV2(first: 10) {
              nodes {
                id
                number
                title
                url
                shortDescription
                public
                closed
              }
            }
          }
        }' --jq '.data.viewer.projectsV2.nodes[] | "Project #\(.number): \(.title) - \(.url) (Public: \(.public))"'
      env:
        GITHUB_TOKEN: ${{ secrets.USE_PROJECT_V2_TOKEN }}

    - name: List Project Items with PAT
      if: github.event.inputs.action == 'list-project-items' && github.event.inputs.project_number != ''
      run: |
        echo "Listing items for project #${{ github.event.inputs.project_number }} using PAT..."

        # Get the project details and items directly using the project ID from our list query
        echo "Finding project #${{ github.event.inputs.project_number }} in user projects..."

        # First, get all projects and find the one with matching number
        PROJECT_DATA=$(gh api graphql -f query='
        {
          viewer {
            projectsV2(first: 10) {
              nodes {
                id
                number
                title
                url
              }
            }
          }
        }' --jq '.data.viewer.projectsV2.nodes[] | select(.number == ${{ github.event.inputs.project_number }})')

        if [ -z "$PROJECT_DATA" ]; then
          echo "❌ Project #${{ github.event.inputs.project_number }} not found"
          echo "Available projects:"
          gh api graphql -f query='
          {
            viewer {
              projectsV2(first: 10) {
                nodes {
                  number
                  title
                  url
                }
              }
            }
          }' --jq '.data.viewer.projectsV2.nodes[] | "  - Project #\(.number): \(.title)"'
          exit 1
        fi

        PROJECT_ID=$(echo "$PROJECT_DATA" | jq -r '.id')
        PROJECT_TITLE=$(echo "$PROJECT_DATA" | jq -r '.title')
        PROJECT_URL=$(echo "$PROJECT_DATA" | jq -r '.url')

        echo "✅ Found Project: $PROJECT_TITLE"
        echo "✅ Project ID: $PROJECT_ID"
        echo "✅ Project URL: $PROJECT_URL"

        # Now get project items using the node query method
        echo ""
        echo "Fetching project items..."
        gh api graphql -f query="
        {
          node(id: \"$PROJECT_ID\") {
            ... on ProjectV2 {
              title
              url
              shortDescription
              items(first: 20) {
                totalCount
                nodes {
                  id
                  type
                  content {
                    __typename
                    ... on Issue {
                      title
                      number
                      url
                      state
                    }
                    ... on PullRequest {
                      title
                      number
                      url
                      state
                    }
                    ... on DraftIssue {
                      title
                    }
                  }
                }
              }
            }
          }
        }" --jq '.data.node | "Project: \(.title)\nURL: \(.url)\nTotal Items: \(.items.totalCount)\n\nItems:" + (.items.nodes | map("- \(.content.title // "Draft Item") (\(.type))") | join("\n"))'
      env:
        GITHUB_TOKEN: ${{ secrets.USE_PROJECT_V2_TOKEN }}

    - name: Create Project Item with PAT
      if: github.event.inputs.action == 'create-project-item' && github.event.inputs.project_number != '' && github.event.inputs.item_title != ''
      run: |
        echo "Creating draft item '${{ github.event.inputs.item_title }}' in project #${{ github.event.inputs.project_number }} using PAT..."

        # Find the project ID using the same method as above
        PROJECT_DATA=$(gh api graphql -f query='
        {
          viewer {
            projectsV2(first: 10) {
              nodes {
                id
                number
                title
                url
              }
            }
          }
        }' --jq '.data.viewer.projectsV2.nodes[] | select(.number == ${{ github.event.inputs.project_number }})')

        if [ -z "$PROJECT_DATA" ]; then
          echo "❌ Project #${{ github.event.inputs.project_number }} not found"
          exit 1
        fi

        PROJECT_ID=$(echo "$PROJECT_DATA" | jq -r '.id')
        PROJECT_TITLE=$(echo "$PROJECT_DATA" | jq -r '.title')

        echo "✅ Target Project: $PROJECT_TITLE"
        echo "✅ Project ID: $PROJECT_ID"

        # Create a draft item
        gh api graphql -f query="
        mutation {
          addProjectV2DraftIssue(input: {
            projectId: \"$PROJECT_ID\"
            title: \"${{ github.event.inputs.item_title }}\"
          }) {
            projectItem {
              id
              content {
                ... on DraftIssue {
                  title
                  body
                }
              }
            }
          }
        }" --jq '.data.addProjectV2DraftIssue.projectItem | "✅ Created item: \(.content.title) (ID: \(.id))"'
      env:
        GITHUB_TOKEN: ${{ secrets.USE_PROJECT_V2_TOKEN }}

    - name: Create Repository Issue and Add to Project
      if: github.event.inputs.action == 'create-repo-issue-and-add-to-project' && github.event.inputs.project_number != '' && github.event.inputs.item_title != ''
      run: |
        echo "Creating repository issue '${{ github.event.inputs.item_title }}' and adding to project #${{ github.event.inputs.project_number }}..."

        # First, find the project ID
        PROJECT_DATA=$(gh api graphql -f query='
        {
          viewer {
            projectsV2(first: 10) {
              nodes {
                id
                number
                title
                url
              }
            }
          }
        }' --jq '.data.viewer.projectsV2.nodes[] | select(.number == ${{ github.event.inputs.project_number }})')

        if [ -z "$PROJECT_DATA" ]; then
          echo "❌ Project #${{ github.event.inputs.project_number }} not found"
          exit 1
        fi

        PROJECT_ID=$(echo "$PROJECT_DATA" | jq -r '.id')
        PROJECT_TITLE=$(echo "$PROJECT_DATA" | jq -r '.title')

        echo "✅ Target Project: $PROJECT_TITLE"
        echo "✅ Project ID: $PROJECT_ID"

        # Create the repository issue first using GitHub CLI
        echo ""
        echo "Creating repository issue..."

        # Create issue with proper body formatting
        gh issue create \
          --title "${{ github.event.inputs.item_title }}" \
          --body "This is a test issue created to demonstrate the issue → PR → CI runner workflow chain.

        ## Purpose
        - Test GitHub Projects v2 integration with repository issues
        - Validate the workflow: issue → PR → CI runner
        - Follow RFC naming conventions

        ## Related
        - Project: $PROJECT_TITLE
        - Workflow: GitHub Projects v2 PAT Demo
        - Created via: GitHub Actions workflow" \
          --assignee @me \
          --label "enhancement" > issue_output.txt

        ISSUE_URL=$(cat issue_output.txt)
        echo "✅ Created repository issue: $ISSUE_URL"

        # Extract issue number
        ISSUE_NUMBER=$(echo "$ISSUE_URL" | grep -o '[0-9]*$')
        echo "✅ Issue number: #$ISSUE_NUMBER"

        # Get the issue node ID via GraphQL
        ISSUE_NODE_ID=$(gh api graphql -f query="
        {
          repository(owner: \"${{ github.repository_owner }}\", name: \"ithome-ironman-2025\") {
            issue(number: $ISSUE_NUMBER) {
              id
              title
              url
            }
          }
        }" --jq '.data.repository.issue.id')

        echo "✅ Issue node ID: $ISSUE_NODE_ID"

        # Add the issue to the project
        echo ""
        echo "Adding issue to project..."
        gh api graphql -f query="
        mutation {
          addProjectV2ItemById(input: {
            projectId: \"$PROJECT_ID\"
            contentId: \"$ISSUE_NODE_ID\"
          }) {
            item {
              id
              content {
                ... on Issue {
                  title
                  number
                  url
                }
              }
            }
          }
        }" --jq '.data.addProjectV2ItemById.item | "✅ Added to project: \(.content.title) (#\(.content.number))"'

        echo ""
        echo "🎉 Workflow complete! Issue created and added to project."
        echo "📋 Issue URL: $ISSUE_URL"
        echo "📊 Project URL: https://github.com/users/${{ github.repository_owner }}/projects/${{ github.event.inputs.project_number }}"
      env:
        GITHUB_TOKEN: ${{ secrets.USE_PROJECT_V2_TOKEN }}

    - name: Display Results Summary
      run: |
        echo "## Projects v2 PAT Demo Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Action performed:** ${{ github.event.inputs.action }}" >> $GITHUB_STEP_SUMMARY
        echo "**Using:** Personal Access Token with project scopes" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "**Workflow run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "This workflow demonstrates accessing personal Projects v2 using a PAT with project scopes." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Key Differences from Built-in Token:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Can access personal Projects v2" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Full project read/write permissions" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Works with user-level projects" >> $GITHUB_STEP_SUMMARY
        echo "- ⚠️ Requires PAT management and rotation" >> $GITHUB_STEP_SUMMARY
