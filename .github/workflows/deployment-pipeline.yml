name: Deployment Pipeline

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., 1.0.0)'
        required: false
        default: '1.0.0'
      target:
        description: 'Deployment target'
        required: false
        default: 'Pack'
        type: choice
        options:
          - Clean
          - Restore
          - Compile
          - Test
          - Pack
          - Publish
          - Deploy
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

permissions:
  contents: write
  packages: write
  actions: read
  attestations: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Required for GitVersion

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Make Nuke executable
        run: chmod +x build/nuke/build.sh

      - name: Set version from input or tag
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.version }}" ]]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV
          else
            echo "VERSION=1.0.0-$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
          fi
          echo "Version: $VERSION"

      - name: Update Build.cs with version
        run: |
          sed -i "s/string Version => \"1.0.0\";/string Version => \"$VERSION\";/" build/nuke/build/Build.cs

      - name: Determine target
        id: target
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "TARGET=${{ github.event.inputs.target }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "TARGET=Deploy" >> $GITHUB_ENV
          else
            echo "TARGET=Pack" >> $GITHUB_ENV
          fi
          echo "Target: $TARGET"

      - name: Run Nuke Build
        run: |
          cd build/nuke
          ./build.sh $TARGET --configuration Release

      - name: Upload NuGet packages
        if: env.TARGET == 'Pack' || env.TARGET == 'Publish' || env.TARGET == 'Deploy'
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages-${{ env.VERSION }}
          path: artifacts/packages/*.nupkg
          retention-days: 30

      - name: Upload symbol packages  
        if: env.TARGET == 'Pack' || env.TARGET == 'Publish' || env.TARGET == 'Deploy'
        uses: actions/upload-artifact@v4
        with:
          name: symbol-packages-${{ env.VERSION }}
          path: artifacts/packages/*.snupkg
          retention-days: 30

      - name: Create GitHub Release
        if: github.ref_type == 'tag' && (env.TARGET == 'Publish' || env.TARGET == 'Deploy')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/packages/*.nupkg
            artifacts/packages/*.snupkg
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}

      - name: Publish to GitHub Packages
        if: env.TARGET == 'Publish' || env.TARGET == 'Deploy'
        run: |
          for package in artifacts/packages/*.nupkg; do
            echo "Publishing $package to GitHub Packages..."
            dotnet nuget push "$package" \
              --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json \
              --api-key ${{ secrets.GITHUB_TOKEN }} \
              --skip-duplicate \
              --no-symbols || echo "Failed to publish $package, continuing..."
          done

      - name: Deploy Summary
        if: always()
        run: |
          echo "## Deployment Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Target**: $TARGET" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Packages Created**: $(ls -1 artifacts/packages/*.nupkg 2>/dev/null | wc -l || echo 0)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -d "artifacts/packages" ]; then
            echo "### Generated Packages:" >> $GITHUB_STEP_SUMMARY
            for package in artifacts/packages/*.nupkg; do
              if [ -f "$package" ]; then
                echo "- $(basename "$package")" >> $GITHUB_STEP_SUMMARY
              fi
            done
          fi