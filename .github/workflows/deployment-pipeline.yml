name: deployment-pipeline

on:
  workflow_run:
    workflows: ["ci"]
    branches: [main]
    types: [completed]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deployment even if CI failed'
        required: false
        default: false
        type: boolean

jobs:
  validate-ci:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || inputs.force_deploy == true
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      sha: ${{ steps.check.outputs.sha }}
    steps:
      - name: Check CI status
        id: check
        run: |
          if [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]] || [[ "${{ inputs.force_deploy }}" == "true" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "sha=${{ github.event.workflow_run.head_sha || github.sha }}" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  build-release:
    runs-on: ubuntu-latest
    needs: validate-ci
    if: needs.validate-ci.outputs.should_deploy == 'true'
    environment: ${{ inputs.environment || 'staging' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ needs.validate-ci.outputs.sha }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore ./dotnet

      - name: Build release
        run: dotnet build ./dotnet --configuration Release --no-restore -warnaserror

      - name: Run tests
        run: dotnet test ./dotnet --configuration Release --no-build --verbosity normal

      - name: Package libraries
        run: |
          # Package all non-test projects as NuGet packages
          for project in $(find ./dotnet -name "*.csproj" | grep -v "\.Tests\.csproj$"); do
            echo "Packaging $project"
            dotnet pack "$project" --configuration Release --no-build --output ./packages
          done

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-packages-${{ inputs.environment || 'staging' }}
          path: ./packages/
          retention-days: 30

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [validate-ci, build-release]
    if: needs.validate-ci.outputs.should_deploy == 'true' && (inputs.environment == 'staging' || inputs.environment == '' || inputs.environment == null)
    environment: staging
    steps:
      - name: Download deployment artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-packages-staging
          path: ./packages

      - name: Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "📦 Packages to deploy:"
          ls -la ./packages/
          
          # Simulate deployment to staging (replace with actual deployment logic)
          echo "✅ Deployment to staging completed successfully"
          echo "Environment: staging"
          echo "Commit: ${{ needs.validate-ci.outputs.sha }}"
          
          # Set deployment status
          echo "DEPLOYMENT_STATUS=success" >> $GITHUB_ENV
          echo "DEPLOYMENT_URL=https://staging.gameconsole.local" >> $GITHUB_ENV

      - name: Run health checks
        run: |
          chmod +x ./scripts/deployment-health-check.sh
          ./scripts/deployment-health-check.sh ./packages staging

      - name: Update deployment status
        run: |
          echo "📊 Deployment Summary:"
          echo "Environment: staging"
          echo "Status: ${{ env.DEPLOYMENT_STATUS }}"
          echo "URL: ${{ env.DEPLOYMENT_URL }}"
          echo "Packages deployed: $(ls ./packages/ | wc -l)"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [validate-ci, build-release, deploy-staging]
    if: needs.validate-ci.outputs.should_deploy == 'true' && inputs.environment == 'production' && needs.deploy-staging.result == 'success'
    environment: production
    steps:
      - name: Download deployment artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-packages-staging
          path: ./packages

      - name: Deploy to production
        run: |
          echo "🚀 Deploying to production environment..."
          echo "📦 Packages to deploy:"
          ls -la ./packages/
          
          # Simulate blue-green deployment to production
          echo "🔄 Starting blue-green deployment..."
          echo "✅ Production deployment completed successfully"
          echo "Environment: production"
          echo "Commit: ${{ needs.validate-ci.outputs.sha }}"

      - name: Run production health checks
        run: |
          chmod +x ./scripts/deployment-health-check.sh
          ./scripts/deployment-health-check.sh ./packages production

  rollback:
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    needs: [validate-ci, build-release, deploy-staging, deploy-production]
    environment: ${{ inputs.environment || 'staging' }}
    steps:
      - name: Rollback deployment
        run: |
          echo "⚠️  Deployment failed, initiating rollback..."
          echo "Environment: ${{ inputs.environment || 'staging' }}"
          
          # Simulate rollback process
          echo "🔄 Rolling back to previous version..."
          echo "✅ Rollback completed successfully"