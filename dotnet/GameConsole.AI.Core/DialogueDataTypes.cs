namespace GameConsole.AI.Services;

/// <summary>
/// Represents context for dialogue generation.
/// </summary>
public class DialogueContext
{
    /// <summary>
    /// Gets or sets the character speaking.
    /// </summary>
    public string Speaker { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the conversation history.
    /// </summary>
    public string[] ConversationHistory { get; set; } = Array.Empty<string>();

    /// <summary>
    /// Gets or sets the current topic or subject.
    /// </summary>
    public string Topic { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the emotional tone for the response.
    /// </summary>
    public string Tone { get; set; } = "Neutral";

    /// <summary>
    /// Gets or sets contextual information about the game state.
    /// </summary>
    public GameContext GameContext { get; set; } = new GameContext();
}

/// <summary>
/// Represents a quest brief for quest generation.
/// </summary>
public class QuestBrief
{
    /// <summary>
    /// Gets or sets the quest title or identifier.
    /// </summary>
    public string Title { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the quest type or category.
    /// </summary>
    public string QuestType { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the target player level for the quest.
    /// </summary>
    public int TargetLevel { get; set; }

    /// <summary>
    /// Gets or sets the estimated duration for quest completion.
    /// </summary>
    public TimeSpan EstimatedDuration { get; set; }

    /// <summary>
    /// Gets or sets required locations for the quest.
    /// </summary>
    public string[] RequiredLocations { get; set; } = Array.Empty<string>();

    /// <summary>
    /// Gets or sets involved NPCs or characters.
    /// </summary>
    public string[] InvolvedCharacters { get; set; } = Array.Empty<string>();

    /// <summary>
    /// Gets or sets additional constraints or requirements.
    /// </summary>
    public Dictionary<string, object> Constraints { get; set; } = new Dictionary<string, object>();
}

/// <summary>
/// Represents a quest outline generated by AI.
/// </summary>
public class QuestOutline
{
    /// <summary>
    /// Gets or sets the quest title.
    /// </summary>
    public string Title { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the quest description.
    /// </summary>
    public string Description { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the main objectives for the quest.
    /// </summary>
    public string[] Objectives { get; set; } = Array.Empty<string>();

    /// <summary>
    /// Gets or sets optional objectives for the quest.
    /// </summary>
    public string[] OptionalObjectives { get; set; } = Array.Empty<string>();

    /// <summary>
    /// Gets or sets rewards for completing the quest.
    /// </summary>
    public QuestReward[] Rewards { get; set; } = Array.Empty<QuestReward>();

    /// <summary>
    /// Gets or sets the narrative flow or story beats.
    /// </summary>
    public string[] StoryBeats { get; set; } = Array.Empty<string>();
}

/// <summary>
/// Represents story context for narrative generation.
/// </summary>
public class StoryContext
{
    /// <summary>
    /// Gets or sets the story genre.
    /// </summary>
    public string Genre { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the narrative perspective (first person, third person, etc.).
    /// </summary>
    public string Perspective { get; set; } = "Third Person";

    /// <summary>
    /// Gets or sets main characters in the story.
    /// </summary>
    public string[] Characters { get; set; } = Array.Empty<string>();

    /// <summary>
    /// Gets or sets the setting or location for the story.
    /// </summary>
    public string Setting { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the current story events or plot points.
    /// </summary>
    public string[] PlotPoints { get; set; } = Array.Empty<string>();

    /// <summary>
    /// Gets or sets the desired tone or mood.
    /// </summary>
    public string Tone { get; set; } = string.Empty;
}

/// <summary>
/// Represents a dialogue tree structure.
/// </summary>
public class DialogueTree
{
    /// <summary>
    /// Gets or sets the root node of the dialogue tree.
    /// </summary>
    public DialogueNode Root { get; set; } = new DialogueNode();

    /// <summary>
    /// Gets or sets all nodes in the dialogue tree.
    /// </summary>
    public DialogueNode[] AllNodes { get; set; } = Array.Empty<DialogueNode>();

    /// <summary>
    /// Gets or sets metadata about the dialogue tree.
    /// </summary>
    public Dictionary<string, object> Metadata { get; set; } = new Dictionary<string, object>();
}

/// <summary>
/// Represents a single node in a dialogue tree.
/// </summary>
public class DialogueNode
{
    /// <summary>
    /// Gets or sets the unique identifier for this node.
    /// </summary>
    public string NodeId { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the text content for this dialogue node.
    /// </summary>
    public string Text { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the speaker for this dialogue node.
    /// </summary>
    public string Speaker { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets child nodes (possible responses).
    /// </summary>
    public DialogueNode[] Children { get; set; } = Array.Empty<DialogueNode>();

    /// <summary>
    /// Gets or sets conditions for displaying this node.
    /// </summary>
    public string[] Conditions { get; set; } = Array.Empty<string>();

    /// <summary>
    /// Gets or sets actions to trigger when this node is selected.
    /// </summary>
    public string[] Actions { get; set; } = Array.Empty<string>();
}

/// <summary>
/// Represents a quest reward.
/// </summary>
public class QuestReward
{
    /// <summary>
    /// Gets or sets the type of reward (Item, Currency, Experience, etc.).
    /// </summary>
    public string Type { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the identifier or name of the reward.
    /// </summary>
    public string Identifier { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the quantity of the reward.
    /// </summary>
    public int Quantity { get; set; } = 1;

    /// <summary>
    /// Gets or sets additional metadata about the reward.
    /// </summary>
    public Dictionary<string, object> Metadata { get; set; } = new Dictionary<string, object>();
}